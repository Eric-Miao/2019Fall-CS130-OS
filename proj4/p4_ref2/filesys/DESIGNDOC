             +-------------------------+
             | CS 140                  |
             | PROJECT 4: FILE SYSTEMS |
             | DESIGN DOCUMENT         |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yifan Cao <caoyf@shanghaitech.edu.cn>
Xiaoyu Song <songxy1@shanghaitech.edu.cn>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In `filesys/inode.c`:

// on-disk inode
struct inode_disk {

    // direct blocks (DIRECT_COUNT == 123)
    block_sector_t index0[DIRECT_COUNT];

    // indirect block
    block_sector_t index1;

    // doubly indirect block
    block_sector_t index2;

    // is a directory or not
    unsigned is_dir;

    // ...

};

// an indirect block
struct inode_indirect {

    // the blocks of next level
    block_sector_t blocks[INDIRECT_PER_SECTOR];

};

// in-memory inode
struct inode
{

    // the lock for synchronization
    struct lock lock_inode;

    // the lock for synchronizing directories
    struct lock lock_dir;

    // is directory or not
    bool is_dir;

    // ...

};

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

We have 123 direct blocks, 1 indirect block and 1 doubly indirect
block in our inode. One block could support 512 bytes. One indirect
block can point to 128 blocks. Thus, the maximum size of a file is:

(123 + 128 + 128 * 128) * 512 bytes = 8517120 bytes = 8.12 MiB

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

The process acquires a lock `inode_lock` of an inode before extending
the file. If another process also wants to extend, it must wait for
this lock.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

Process B does not update the length of this file before it writes to
the new section. In other words, it doesn't update the length of this
file until it finishes writing to a new section. This guarantees that
A could always read data that B writes as long as A reads the updated
length from B.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

Our scheduler is round-robin for processes with the same priorities,
so a process cannot be indefinitely blocked.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Yes, our inode structure is a multilevel index. We choose this
structure since it supports large files, while for a smaller file, the
access could be faster. The direct blocks are faster than the indirect
block, which is faster than the doubly indirect block. A file tries
to fit in the direct blocks first. If not enough, it tries to fit in
the indirect block, then doubly indirect block.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In `filesys/directory.c`:

// a directory entry
struct dir_entry {

    // is directory or not
    bool is_dir;

    // ...

};

In `threads/thread.h`:

// thread
struct thread {

    // current working directory
    struct dir *cwd;

    // ...

};

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

Note: If there is a continuous string without '/', we call it a token.

1. If the length of pathname is 0, return with an error.
2. Check if the first character is '/'. If so, it is an absolute path.
   Otherwise, it is a relative path.
3. Extract the last token. Set the pointer to the last character and
   move to the left until it encounters a non-'/' character or reaches
   the first character. If it reaches the first character, it must be
   the case that the path is actually representing a root directory
   which could be "/", "//", etc. In this case, return with the
   information that this path is actually a root directory.
4. Continue moving to the left, until it encounters a '/' or the first
   character. Then we successfully extracted the last token. We write
   a '\0' at the end of token in order to remove trailing '/'s.
5. Iterate over the pathname and extract tokens using `strtok_r()`,
   until the last token is encountered. For each token, it is actually
   the name of a directory.
6. Starting from the root directory (for an absolute path) or the
   current working directory (for a relative path), we look up for the
   directory entry in the current directory, open it, and move the
   current directory pointer to it. If we cannot find the entry in an
   iteration, return with an error immediately.
7. Return the directory pointer and the filename. Also, return the
   information that whether the pathname must be a directory (i.e.
   ending with '/').

A pathname starting with '/' is an absolute path, otherwise it is a
relative path. For an absolute path, we start from the root directory,
otherwise from the current working directory.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

Before every directory modification, we acquire a lock at this
directory, which is the member `dir_lock` of an inode.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

We allow a directory to be removed if it is open by a process. All
future operations on this directory will fail. During the traversal
of a path, if starting from a directory other than the removed
directory (i.e. an absolute path, or a relative path with current
working directory other than the removed directory), it cannot find
the removed path since the directory entry has already been erased.
Otherwise, if it is a relative path and the current working directory
is exactly the removed path, we cannot rely on the original behavior,
so we explicitly check for that and return an error.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

We store the current working directory (CWD) pointer `cwd` in the
struct `thread`, which is a pointer to the struct `dir`. For the
initial thread, it opens the root directory as CWD at initial. For a
thread created by a parent thread, it opens the parents' CWD at
initial. When the current working directory is changed by `chdir()`,
it opens the new directory and closes the old one. This guarantees
that the CWD is always opened and will not be freed. In addition, it
could be used anywhere by simply accessing the member of a thread.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In `filesys/cache.c`:

// an entry of the buffer cache
struct cache_entry {

    // buffer contents
    uint8_t buffer[BLOCK_SECTOR_SIZE];

    // sector number
    block_sector_t sector;

    // the lock for synchronization
    struct lock lock;

    // valid bit
    bool valid;

    // dirty bit
    bool dirty;

    // accessed bit
    bool accessed;
};

// the buffer cache
static struct cache_entry cache[CACHE_SIZE];

// the global buffer cache lock
static struct lock cache_lock;

// an entry of the read ahead queue
struct ahead_entry {

    // the sector to be read ahead
    block_sector_t sector;

    // the list element to be put in the queue
    struct list_elem elem;
};

// the read ahead queue
static struct list ahead_queue;

// the lock for synchronizing read ahead queue
static struct lock ahead_lock;

// the condition variable for synchronizing read ahead queue
static struct condition ahead_cond;

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We use the clock algorithm.

1. Iterate over the whole buffer cache array from begin to end
   repeatedly, i.e. when the end is reached, move to begin.
2. For every cache block,
   a. Try to acquire its lock, if failed, continue. Otherwise, move on
      to the following steps. (this helps speed up eviction)
   b. If this block is invalid, set it valid, release the lock, modify
      the sector number and return this block.
   c. If this block is accessed, set it to non-accessed, release the
      lock and continue.
   d. Otherwise, this block is to be evicted. If it is dirty, write it
      to the block device, and set the dirty bit to false.
   e. Release the lock, modify the sector number and return this block.

>> C3: Describe your implementation of write-behind.

1. Create a thread during boot and run the following steps in this
   thread (which is written in a function).
2. Run an infinite loop. For every loop,
   a. Sleep for a number of ticks (we use 1 * TIMER_FREQ)
   b. For every cache block,
      a. Acquire its lock.
      b. If it is valid and dirty, write it to the block device, and
         set the dirty bit to false.
      c. Release the lock.

>> C4: Describe your implementation of read-ahead.

The read-ahead consists of two parts. One part is the consumer, which
is a daemon thread that waits for read-ahead requests and processes
them. Another part is the producer, which raises read-ahead requests
in `inode_read_at()`.

The consumer (daemon thread):

1. Create a thread during boot and run the following steps in this
   thread (which is written in a function).
2. Run an infinite loop. For every loop,
   a. Acquire the read ahead lock.
   b. While the queue is empty, wait for the condition variable.
   c. Pop an element from the queue, which is an entry that contains
      the sector number to be fetched.
   d. Fetch that sector from the block device to the buffer cache.
   e. Release the read ahead lock.

The producer (in `inode_read_at()`):

Before reading every block, check if the next block could be fetched.
If so, `malloc()` an entry, store the sector number of the next block,
and insert it to the queue. The entry will be processed and `free()`d
by the consumer. After that, it may read the current block, while the
consumer is fetching the next block simultaneously.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

If a process wants to evict that block, it must acquire the lock for
that block first. However, a process is also holding the lock when it
is reading or writing data in a block.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

If a process wants to access the block, it must acquire the lock for
that block first. However, a process is also holding the lock when it
is evicting the block.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

If some blocks in some files need frequent reading/writing, the workload
can benefit from buffer caching. Without the buffer cache, there is a
large number of I/O between the memory and disk, which is expensive in
time.

If a large file is being read, the workload can benefit from read-ahead.
A block could be already in the buffer cache since the daemon thread
fetches it earlier.

If a process writes to many different sectors, the workload can benefit
from write-behind. If the process wrote some sectors, the write-behind
daemon could write them to the block device some time. When the process
needs to evict a block, and it reaches an old sector it wrote before,
it is very likely that the write-behind daemon has already flushed this
block, so the process does not need to flush again. This saves time.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?

        +---------------------------+
		    | CS 140                    |
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	DESIGN DOCUMENT           |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

When we call frame eviction we will first try to lock the frame if success
then we do eviction and skip the frame if faided. And we release the 
lock after eviction so there will be no race come when evicting.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

We have a lock for each frame and each function that is tring to modify
the frame will acquire the frame lock first and release the lock before
return. And each time we call frame allocatation and eviction will first
try to acquire the lock if fails then skip the frame.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

When process accessed to a paged-out page it will come into page fault
and we will verify whether the fault address is valid or not, and when
it is accessing to a paged-out page we will call page in function to 
bring in the page from proper scope. In page fault we check fault address
and the running status returned by allocation or page-in or set function.
If any false get then terminate the process immediately. 

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We have use multiple locks in our VM system. There are three locks in
frame table, single frame and the swap area. We think that giving each
frame a lock can avoid processes modify the frame simultaneously which
may cause bugs.Locks for frame table and swap bit map is also to avoid
simultaneously scan and modify. It is quite hard and tricky to maintain
single lock in whole VM system. We can't call function that modify vitural
page and function that modify frame seperately.


			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In "syscall.h" newly declaration:
/*struct that stores map information and file pointer*/
struct map
{
  int mapid;             /*map id*/
  size_t page_count;     /*amount of pages*/
  uint8_t *index;        /*begin position of map memory*/
  struct file *file;     /*file address*/
  struct list_elem elem; /*convenient for storing*/
}; 

In "thread.h" additional declaration:
struct list map_list;    /*map list*/

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Each process has its own memory map list which contains the information
of the memory mapped files and virtul memory address as well as its own
mapid. Each page has a swapabel and swapable varibale to identify swap
pages and other pages.When a process start, we will initialize a map 
list and when calling mmap it will go into page fault and it will allocate
a virtural page for buffer if there is free frame then allocate it to the
virtural page. Call eviction if not. After frame allocation page fault 
choose to fill the page with file, swap data or zeros.

>> C3: Explain how you determine whether a new file mapping overlaps
>> another segment, either at the time the mapping is created or later.

If the vitural page has been taken aka it is in my supplemental page table
then we return NULL which means allocation failed and clear the information
stored in map and free the map created, return -1 to indicate an error occured.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Since our mmap calls file length and allocate "demand" page from memory
for file to map. It is kind of like demand-paged from executables.However
data frome executables stored in stack and flush after process exit there
is no need to write them into origianl files just allocate a swap area as
"additonal memory" in disk to temporarily store the data but in mmap you
have to write back to disk after modification.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

